# Generated by Django 4.2.7 on 2025-09-20 06:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ApiEndpoint",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("endpoint_url", models.URLField(max_length=1000)),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("GET", "GET"),
                            ("POST", "POST"),
                            ("PUT", "PUT"),
                            ("PATCH", "PATCH"),
                            ("DELETE", "DELETE"),
                        ],
                        default="POST",
                        max_length=10,
                    ),
                ),
                ("auth_type", models.CharField(default="none", max_length=50)),
                ("auth_config", models.JSONField(blank=True, default=dict)),
                ("headers", models.JSONField(blank=True, default=dict)),
                ("timeout", models.PositiveIntegerField(default=30)),
                ("retry_attempts", models.PositiveIntegerField(default=3)),
                ("is_active", models.BooleanField(default=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the domain", max_length=255
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        help_text="Base URL to start scraping from (e.g., https://example.com/api/)",
                        max_length=500,
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        db_index=True,
                        help_text="Domain name extracted from base_url",
                        max_length=255,
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        choices=[
                            ("http", "HTTP"),
                            ("https", "HTTPS"),
                            ("both", "Both HTTP/HTTPS"),
                        ],
                        default="https",
                        max_length=10,
                    ),
                ),
                (
                    "max_depth",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum number of subpath levels to scrape",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "max_pages",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Maximum number of pages to scrape per session",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "scrape_frequency_hours",
                    models.PositiveIntegerField(
                        default=24,
                        help_text="How often to scrape this domain (in hours)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(8760),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("disabled", "Disabled"),
                            ("error", "Error"),
                        ],
                        db_index=True,
                        default="active",
                        max_length=20,
                    ),
                ),
                ("last_scraped", models.DateTimeField(blank=True, null=True)),
                (
                    "next_scrape",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "advanced_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Advanced scraping configuration in JSON format",
                    ),
                ),
                ("total_scrapes", models.PositiveIntegerField(default=0)),
                ("successful_scrapes", models.PositiveIntegerField(default=0)),
                ("failed_scrapes", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_domains",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SystemMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("metric_name", models.CharField(db_index=True, max_length=100)),
                ("metric_value", models.FloatField()),
                ("metric_unit", models.CharField(blank=True, max_length=20)),
                ("context_data", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["metric_name", "created_at"],
                        name="scraper_sys_metric__38d02c_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ScrapingTemplate",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "selectors",
                    models.JSONField(
                        help_text="CSS/XPath selectors for extracting data"
                    ),
                ),
                (
                    "rules",
                    models.JSONField(
                        default=dict, help_text="Scraping rules and patterns"
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="scraping_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ScrapingJob",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        default="scheduled",
                        help_text="Type of scraping job (scheduled, manual, api)",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("pages_scraped", models.PositiveIntegerField(default=0)),
                ("pages_failed", models.PositiveIntegerField(default=0)),
                ("total_size_bytes", models.BigIntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
                (
                    "scheduler_job_id",
                    models.CharField(blank=True, db_index=True, max_length=255),
                ),
                ("execution_node", models.CharField(blank=True, max_length=100)),
                (
                    "job_config",
                    models.JSONField(
                        default=dict, help_text="Job-specific configuration overrides"
                    ),
                ),
                (
                    "domain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scraping_jobs",
                        to="scraper.domain",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ScrapedPage",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("url", models.URLField(db_index=True, max_length=2000)),
                ("url_hash", models.CharField(db_index=True, max_length=64)),
                ("depth_level", models.PositiveIntegerField(default=0)),
                ("title", models.CharField(blank=True, max_length=500)),
                (
                    "content",
                    models.TextField(blank=True, help_text="Extracted text content"),
                ),
                (
                    "raw_html",
                    models.TextField(blank=True, help_text="Raw HTML content"),
                ),
                ("status_code", models.PositiveIntegerField(null=True)),
                ("content_type", models.CharField(blank=True, max_length=100)),
                ("content_length", models.BigIntegerField(null=True)),
                ("last_modified", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                            ("duplicate", "Duplicate"),
                        ],
                        default="success",
                        max_length=20,
                    ),
                ),
                ("processing_time_ms", models.PositiveIntegerField(null=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "extracted_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured data extracted from the page",
                    ),
                ),
                ("links_found", models.PositiveIntegerField(default=0)),
                ("internal_links", models.PositiveIntegerField(default=0)),
                ("external_links", models.PositiveIntegerField(default=0)),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scraped_pages",
                        to="scraper.scrapingjob",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="scrapingjob",
            index=models.Index(
                fields=["domain", "status"], name="scraper_scr_domain__3d8906_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scrapingjob",
            index=models.Index(
                fields=["status", "started_at"], name="scraper_scr_status_b632da_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scrapingjob",
            index=models.Index(
                fields=["scheduler_job_id"], name="scraper_scr_schedul_00dba1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scrapedpage",
            index=models.Index(
                fields=["job", "status"], name="scraper_scr_job_id_261055_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scrapedpage",
            index=models.Index(
                fields=["url_hash"], name="scraper_scr_url_has_59b070_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scrapedpage",
            index=models.Index(
                fields=["status", "created_at"], name="scraper_scr_status_2e7c60_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="scrapedpage",
            unique_together={("job", "url_hash")},
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["domain", "status"], name="scraper_dom_domain_e43e66_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["next_scrape", "status"], name="scraper_dom_next_sc_99ae02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["created_by", "status"], name="scraper_dom_created_bcd153_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="domain",
            unique_together={("base_url", "created_by")},
        ),
    ]
